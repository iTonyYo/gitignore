#!/usr/bin/env node
"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var t=e(require("meow")),i=e(require("update-notifier")),r=e(require("chalk")),n=e(require("redent")),a=require("cosmiconfig"),o=e(require("debug")),s=require("fs"),c=e(s),l=e(require("is-reachable")),g=require("util"),u=require("path"),h=e(u),w=e(require("cache-manager")),y=e(require("cache-manager-fs")),d=e(require("callsites")),p=e(require("got")),f=e(require("has-ext")),m=e(require("lodash.filter")),b=e(require("camelcase-keys")),q=e(require("p-map")),v=e(require("write-file-atomic")),D=e=>[Object,Array].includes((e||{}).constructor)&&!Object.entries(e||{}).length,S=(e,t,i=null)=>String.prototype.split.call(t,/[,[\].]+?/).filter(Boolean).reduce((e,t)=>Object.hasOwnProperty.call(e,t)?e[t]:i,e),$=g.promisify(c.stat);const k=(e,t)=>u.resolve(s.realpathSync(t),e),j=o("LG:log"),O=e=>Array.isArray(e)?e.reduce((e,t)=>e.concat(O(t)),[]):[e],U=async e=>{const{body:t}=await p(e);return await q(b(JSON.parse(t)),async({name:e,downloadUrl:t})=>f(e,"gitignore")?t:void 0,{concurrency:8})},C=async(e,t)=>await q(t,async t=>e.find(e=>e.includes(t+".gitignore")),{concurrency:8}),G=async e=>(await(async(e,t)=>await q(e,async e=>S(await p(e,t.got),"body"),{concurrency:t.concurrency}))(e,{concurrency:8})).join("\n\n\n"),L=async(e,t)=>{await v(t,e,{},e=>{if(e)throw e})},N=o("LG:log");var P=async(e,t)=>{const i=await new Promise((e,t)=>{try{const t=h.join(d()[0].getFileName(),"../..");j(t);const i=w.caching({store:y,options:{ttl:120,maxsize:1e6,path:k(".cache",t),preventfill:!1,fillcallback:()=>{e(i)}}})}catch(e){t(e)}}),r=g.promisify(i.get),n=g.promisify(i.set),a=k(".gitignore",t);N("保存至 "+a);const o=await r("allDownloadUrls");if(D(o)){N("远程获取下载列表");const t=await(async()=>m(O(await q(["https://api.github.com/repos/github/gitignore/contents","https://api.github.com/repos/github/gitignore/contents/Global"],U,{concurrency:2})),void 0))();N(`获取到 ${t.length} 个模板`);const i=await C(t,e);N(`待下载 ${i.length} 个模板`);const r=n("allDownloadUrls",t),o=L(await G(i),a);await r,await o}if(!D(o)){N("从缓存中获取下载列表");const t=await r("allDownloadUrls"),i=await C(t,e);N(`待下载 ${i.length} 个模板`),await L(await G(i),a)}};const x=o("LG:log");var A=async({needs:e=[],to:t="."})=>{if(!await(async e=>{try{return(await $(e)).isDirectory()}catch(e){return!1}})(t))throw Error("保存位置必须有效");if(x("保存位置有效"),!await l("https://api.github.com"))throw Error("访问 `github/gitignore` 项目时出现故障");return x("可以访问 `github/gitignore` 项目"),await P(e,t),{message:"成功添加 `.gitignore` 文件",out:s.realpathSync(t)}};class B{constructor(){var e;i({pkg:{name:"@oopsunome/latest-gitignore",version:"1.1.1"}}).notify(),this.cli=t("\n      使用方式\n        $ latest-gitignore <主题> <...> 选项 [...]\n\n      选项\n        --out, -o,                                       '.gitignore' 文件存储位置，默认：'process.cwd()'\n        --version, -V,                                   查看版本号\n        --help, -h                                       查看帮助\n\n      示例\n        $ latest-gitignore macOS Windows Linux Node -o . 在命令行中指定需要忽略的文件\n        $ latest-gitignore -o .                          已在配置中指定需要忽略的文件\n    ",{flags:{out:{type:"string",alias:"o"},help:{type:"boolean",alias:"h"},version:{type:"boolean",alias:"V"}}}),this.workingPath=(e=this.cli.input[0],{twd:D(e)?process.cwd():e,cwd:process.cwd()}).twd,this.userDefinedConfig=this.getUserDefinedConfig(),this.log=o("LG:log")}async run(){if(D(this.userDefinedConfig))return void console.log(n(r`
        {red.bold 检测到您未提供所需模板，\`latest-gitignore\` 不得不中止。}
        {grey 建议运行 \`latest-gitignore --help\` 来获取使用帮助。}
      `,2));this.log("您已声明所需模板");const e=await A({needs:this.getSelectedTemplatesByName(),to:this.getDest()});console.log(n(r`
      {green.bold ${e.message}}
      {grey ${e.out}}
    `,2))}getSelectedTemplatesByName(){const{input:e}=this.cli;return D(e)?this.userDefinedConfig:e}getDest(){const{flags:e}=this.cli,{out:t}=e;return D(t)?this.workingPath:t}getUserDefinedConfig(){const e=a.cosmiconfigSync("gitignore").search(this.workingPath);return D(e)?{}:S(e,"config")}}(async()=>{const e=new B;await e.run()})();
